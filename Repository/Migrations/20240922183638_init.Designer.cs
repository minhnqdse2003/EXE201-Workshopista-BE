// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Models;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(Exe201WorkshopistaContext))]
    [Migration("20240922183638_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Repository.Models.AuditLog", b =>
                {
                    b.Property<Guid>("LogId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("log_id");

                    b.Property<string>("Action")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("action");

                    b.Property<string>("Entity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("entity");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("entity_id");

                    b.Property<Guid?>("PerformedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("performed_by");

                    b.Property<DateTime?>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("LogId")
                        .HasName("PK__AuditLog__9E2397E0775D0C7B");

                    b.ToTable("AuditLog", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("slug");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CategoryId")
                        .HasName("PK__Category__D54EE9B4999D4519");

                    b.HasIndex(new[] { "Slug" }, "UQ__Category__32DD1E4CA9B28410")
                        .IsUnique()
                        .HasFilter("[slug] IS NOT NULL");

                    b.HasIndex(new[] { "Name" }, "UQ__Category__72E12F1BF3C908B9")
                        .IsUnique()
                        .HasFilter("[name] IS NOT NULL");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Commission", b =>
                {
                    b.Property<Guid>("CommissionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("commission_id");

                    b.Property<decimal?>("CommissionRate")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("commission_rate");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("TotalCommission")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("total_commission");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("WorkshopId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("workshop_id");

                    b.HasKey("CommissionId")
                        .HasName("PK__Commissi__D19D7CC994FB9C82");

                    b.HasIndex("WorkshopId");

                    b.ToTable("Commission", (string)null);
                });

            modelBuilder.Entity("Repository.Models.EventAnalytic", b =>
                {
                    b.Property<Guid>("AnalyticsId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("analytics_id");

                    b.Property<decimal?>("AverageRating")
                        .HasColumnType("decimal(2, 1)")
                        .HasColumnName("average_rating");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("TotalRevenue")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("total_revenue");

                    b.Property<int?>("TotalReviews")
                        .HasColumnType("int")
                        .HasColumnName("total_reviews");

                    b.Property<int?>("TotalTicketsSold")
                        .HasColumnType("int")
                        .HasColumnName("total_tickets_sold");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("WorkshopId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("workshop_id");

                    b.HasKey("AnalyticsId")
                        .HasName("PK__EventAna__D5DC3DE1137F8C0D");

                    b.HasIndex("WorkshopId");

                    b.ToTable("EventAnalytics");
                });

            modelBuilder.Entity("Repository.Models.News", b =>
                {
                    b.Property<Guid>("NewsId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("news_id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image_url");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("published_at");

                    b.Property<string>("Slug")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("slug");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("NewsId")
                        .HasName("PK__News__4C27CCD8F7E3AF43");

                    b.HasIndex(new[] { "Slug" }, "UQ__News__32DD1E4C5A8B7C4F")
                        .IsUnique()
                        .HasFilter("[slug] IS NOT NULL");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Repository.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("order_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("currency_code");

                    b.Property<Guid?>("ParticipantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("participant_id");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("payment_status");

                    b.Property<DateTime?>("PaymentTime")
                        .HasColumnType("datetime")
                        .HasColumnName("payment_time");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("total_amount");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("OrderId")
                        .HasName("PK__Order__465962298BD6BFF4");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("Repository.Models.OrderDetail", b =>
                {
                    b.Property<Guid>("OrderDetailsId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("order_details_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("currency_code");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("order_id");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<int?>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("quantity");

                    b.Property<Guid?>("TicketId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ticket_id");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("total_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("WorkshopId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("workshop_id");

                    b.HasKey("OrderDetailsId")
                        .HasName("PK__OrderDet__F6FB5AE44C7C30C5");

                    b.HasIndex("OrderId");

                    b.HasIndex("TicketId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Repository.Models.Organizer", b =>
                {
                    b.Property<Guid>("OrganizerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("organizer_id");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("contact_phone");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("organization_name");

                    b.Property<string>("SocialLinks")
                        .HasColumnType("text")
                        .HasColumnName("social_links");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<bool?>("Verified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("verified");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("website_url");

                    b.HasKey("OrganizerId")
                        .HasName("PK__Organize__063470141F69041A");

                    b.HasIndex("UserId");

                    b.ToTable("Organizer", (string)null);
                });

            modelBuilder.Entity("Repository.Models.PaymentMethod", b =>
                {
                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("payment_method_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("MethodName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("method_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("PaymentMethodId")
                        .HasName("PK__PaymentM__8A3EA9EBA7FDCED2");

                    b.ToTable("PaymentMethod", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Promotion", b =>
                {
                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("promotion_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("currency_code");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<Guid?>("OrganizerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("organizer_id");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<string>("PromotionType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("promotion_type");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("WorkshopId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("workshop_id");

                    b.HasKey("PromotionId")
                        .HasName("PK__Promotio__2CB9556B2C8CD7C8");

                    b.HasIndex("OrganizerId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("Promotion", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Review", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("review_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("ParticipantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("participant_id");

                    b.Property<short?>("Rating")
                        .HasColumnType("smallint")
                        .HasColumnName("rating");

                    b.Property<string>("ReviewStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("review_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("WorkshopId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("workshop_id");

                    b.HasKey("ReviewId")
                        .HasName("PK__Review__60883D90FB2B51AA");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Subscription", b =>
                {
                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("subscription_id");

                    b.Property<bool?>("AutoRenew")
                        .HasColumnType("bit")
                        .HasColumnName("auto_renew");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<DateTime?>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("start_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Tier")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tier");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("SubscriptionId")
                        .HasName("PK__Subscrip__863A7EC1425E97CF");

                    b.HasIndex("UserId");

                    b.ToTable("Subscription", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Ticket", b =>
                {
                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ticket_id");

                    b.Property<DateTime?>("BookingTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("booking_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("currency_code");

                    b.Property<Guid?>("ParticipantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("participant_id");

                    b.Property<DateTime?>("PaymentTime")
                        .HasColumnType("datetime")
                        .HasColumnName("payment_time");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<string>("QrCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("qr_code");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<Guid?>("WorkshopId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("workshop_id");

                    b.HasKey("TicketId")
                        .HasName("PK__Ticket__D596F96BCA20FFB1");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("transaction_id");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("currency_code");

                    b.Property<Guid?>("ParticipantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("participant_id");

                    b.Property<Guid?>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("payment_method_id");

                    b.Property<Guid?>("TicketId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ticket_id");

                    b.Property<string>("TransactionReference")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("transaction_reference");

                    b.Property<string>("TransactionStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("transaction_status");

                    b.Property<DateTime?>("TransactionTime")
                        .HasColumnType("datetime")
                        .HasColumnName("transaction_time");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("TransactionId")
                        .HasName("PK__Transact__85C600AFBC29D7EE");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("TicketId");

                    b.HasIndex(new[] { "TransactionReference" }, "UQ__Transact__F0DAF2E82F8DC13B")
                        .IsUnique()
                        .HasFilter("[transaction_reference] IS NOT NULL");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("Repository.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<bool?>("EmailVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("email_verified");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<bool?>("PhoneVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("phone_verified");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("profile_image_url");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime")
                        .HasColumnName("refresh_token_expiry_time");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserId")
                        .HasName("PK__User__B9BE370F02E16F77");

                    b.HasIndex(new[] { "Email" }, "UQ__User__AB6E6164168C33A0")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("96173225-e65f-493a-a69a-eb3b688a581b"),
                            Email = "admin@gmail.com",
                            EmailVerified = true,
                            FirstName = "Alice",
                            LastName = "Smith",
                            PasswordHash = "$2a$11$FR2Ki3YCqkFCsdULGZZPiOfOWzqWBy56BMuPz/MjqeyMOxDQ3xk8W",
                            PhoneNumber = "1234567890",
                            PhoneVerified = true,
                            ProfileImageUrl = "https://example.com/profile_image_1.jpg",
                            Role = "admin"
                        },
                        new
                        {
                            UserId = new Guid("45fe7490-9058-41ec-99c5-e3c806d8763c"),
                            Email = "org@gmail.com",
                            EmailVerified = true,
                            FirstName = "Bob",
                            LastName = "Johnson",
                            PasswordHash = "$2a$11$nRoy13hETCslCWMu/JJtWOXRyeXLU18ItxcQbDYuVAmmsIzczWTly",
                            PhoneNumber = "9876543210",
                            PhoneVerified = true,
                            ProfileImageUrl = "https://example.com/profile_image_2.jpg",
                            Role = "Organizer"
                        },
                        new
                        {
                            UserId = new Guid("4152f4cc-dba0-466b-84c4-30cc256f1c4f"),
                            Email = "charlie@example.com",
                            EmailVerified = true,
                            FirstName = "Charlie",
                            LastName = "Brown",
                            PasswordHash = "$2a$11$v9fBhxAbETNORWTAijyh6.b8d/7DWnhVGzLfpWHKcjZ/x7ehy2YTm",
                            PhoneNumber = "5551234567",
                            PhoneVerified = true,
                            ProfileImageUrl = "https://example.com/profile_image_3.jpg",
                            Role = "Organizer"
                        });
                });

            modelBuilder.Entity("Repository.Models.Workshop", b =>
                {
                    b.Property<Guid>("WorkshopId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("workshop_id");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("capacity");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("currency_code");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime")
                        .HasColumnName("end_time");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(10, 8)")
                        .HasColumnName("latitude");

                    b.Property<string>("LocationAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("location_address");

                    b.Property<string>("LocationCity")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("location_city");

                    b.Property<string>("LocationDistrict")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("location_district");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(11, 8)")
                        .HasColumnName("longitude");

                    b.Property<Guid?>("OrganizerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("organizer_id");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<string>("Slug")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("slug");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("video_url");

                    b.HasKey("WorkshopId")
                        .HasName("PK__Workshop__EA6B0559AAAD1465");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OrganizerId");

                    b.HasIndex(new[] { "Slug" }, "UQ__Workshop__32DD1E4C1ED9DC10")
                        .IsUnique()
                        .HasFilter("[slug] IS NOT NULL");

                    b.ToTable("Workshop", (string)null);
                });

            modelBuilder.Entity("Repository.Models.WorkshopImage", b =>
                {
                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("image_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image_url");

                    b.Property<bool?>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_primary");

                    b.Property<Guid?>("WorkshopId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("workshop_id");

                    b.HasKey("ImageId")
                        .HasName("PK__Workshop__DC9AC95561A32F46");

                    b.HasIndex("WorkshopId");

                    b.ToTable("WorkshopImage", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Commission", b =>
                {
                    b.HasOne("Repository.Models.Workshop", "Workshop")
                        .WithMany("Commissions")
                        .HasForeignKey("WorkshopId")
                        .HasConstraintName("FK_Commission_Workshop");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("Repository.Models.EventAnalytic", b =>
                {
                    b.HasOne("Repository.Models.Workshop", "Workshop")
                        .WithMany("EventAnalytics")
                        .HasForeignKey("WorkshopId")
                        .HasConstraintName("FK_EventAnalytics_Workshop");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("Repository.Models.Order", b =>
                {
                    b.HasOne("Repository.Models.User", "Participant")
                        .WithMany("Orders")
                        .HasForeignKey("ParticipantId")
                        .HasConstraintName("FK_Order_User");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Repository.Models.OrderDetail", b =>
                {
                    b.HasOne("Repository.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderDetails_Order");

                    b.HasOne("Repository.Models.Ticket", "Ticket")
                        .WithMany("OrderDetails")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK_OrderDetails_Ticket");

                    b.HasOne("Repository.Models.Workshop", "Workshop")
                        .WithMany("OrderDetails")
                        .HasForeignKey("WorkshopId")
                        .HasConstraintName("FK_OrderDetails_Workshop");

                    b.Navigation("Order");

                    b.Navigation("Ticket");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("Repository.Models.Organizer", b =>
                {
                    b.HasOne("Repository.Models.User", "User")
                        .WithMany("Organizers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Organizer_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.Promotion", b =>
                {
                    b.HasOne("Repository.Models.Organizer", "Organizer")
                        .WithMany("Promotions")
                        .HasForeignKey("OrganizerId")
                        .HasConstraintName("FK_Promotion_Organizer");

                    b.HasOne("Repository.Models.Workshop", "Workshop")
                        .WithMany("Promotions")
                        .HasForeignKey("WorkshopId")
                        .HasConstraintName("FK_Promotion_Workshop");

                    b.Navigation("Organizer");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("Repository.Models.Review", b =>
                {
                    b.HasOne("Repository.Models.User", "Participant")
                        .WithMany("Reviews")
                        .HasForeignKey("ParticipantId")
                        .HasConstraintName("FK_Review_Participant");

                    b.HasOne("Repository.Models.Workshop", "Workshop")
                        .WithMany("Reviews")
                        .HasForeignKey("WorkshopId")
                        .HasConstraintName("FK_Review_Workshop");

                    b.Navigation("Participant");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("Repository.Models.Subscription", b =>
                {
                    b.HasOne("Repository.Models.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Subscription_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.Ticket", b =>
                {
                    b.HasOne("Repository.Models.User", "Participant")
                        .WithMany("Tickets")
                        .HasForeignKey("ParticipantId")
                        .HasConstraintName("FK_Ticket_Participant");

                    b.HasOne("Repository.Models.Workshop", "Workshop")
                        .WithMany("Tickets")
                        .HasForeignKey("WorkshopId")
                        .HasConstraintName("FK_Ticket_Workshop");

                    b.Navigation("Participant");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("Repository.Models.Transaction", b =>
                {
                    b.HasOne("Repository.Models.User", "Participant")
                        .WithMany("Transactions")
                        .HasForeignKey("ParticipantId")
                        .HasConstraintName("FK_Transaction_Participant");

                    b.HasOne("Repository.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Transactions")
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("FK_Transaction_PaymentMethod");

                    b.HasOne("Repository.Models.Ticket", "Ticket")
                        .WithMany("Transactions")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK_Transaction_Ticket");

                    b.Navigation("Participant");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Repository.Models.Workshop", b =>
                {
                    b.HasOne("Repository.Models.Category", "Category")
                        .WithMany("Workshops")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Workshop_Category");

                    b.HasOne("Repository.Models.Organizer", "Organizer")
                        .WithMany("Workshops")
                        .HasForeignKey("OrganizerId")
                        .HasConstraintName("FK_Workshop_Organizer");

                    b.Navigation("Category");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("Repository.Models.WorkshopImage", b =>
                {
                    b.HasOne("Repository.Models.Workshop", "Workshop")
                        .WithMany("WorkshopImages")
                        .HasForeignKey("WorkshopId")
                        .HasConstraintName("FK_WorkshopImage_Workshop");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("Repository.Models.Category", b =>
                {
                    b.Navigation("Workshops");
                });

            modelBuilder.Entity("Repository.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Repository.Models.Organizer", b =>
                {
                    b.Navigation("Promotions");

                    b.Navigation("Workshops");
                });

            modelBuilder.Entity("Repository.Models.PaymentMethod", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Repository.Models.Ticket", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Repository.Models.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Organizers");

                    b.Navigation("Reviews");

                    b.Navigation("Subscriptions");

                    b.Navigation("Tickets");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Repository.Models.Workshop", b =>
                {
                    b.Navigation("Commissions");

                    b.Navigation("EventAnalytics");

                    b.Navigation("OrderDetails");

                    b.Navigation("Promotions");

                    b.Navigation("Reviews");

                    b.Navigation("Tickets");

                    b.Navigation("WorkshopImages");
                });
#pragma warning restore 612, 618
        }
    }
}
